<% title('API Docs') %>

<h2>API Documentation</h2>

<p>The Majority Report API includes access to commonly accessed pages and resources. There are several resources accessible via the API that do not require authentication. These are even available cross-origin, so you can do things like embed a user's post feed on another web page. <small>(<%= link_to 'More on CORS', 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS' %>)</small></p>

<h3>Public API Methods</h3>

<br/>

<h4>All Posts (Homepage)</h4>

<pre><code>GET /api/v1/posts/all</code></pre>
<table class="api-table">
  <tr>
    <th>parameter</th>
    <th>description</th>
  </tr>
  <tr>
    <td>page</td>
    <td>Page of results to return. Defaults to 1. Example: <br/>
      GET /api/v1/posts/all?page=2
    </td>
  </tr>
</table>

<p>Example request using curl:</p>

<pre><code>curl "http://phez.co/api/v1/posts/all"</code></pre>

<p>Will output:</p>

<pre><code>[{"id":192,"title":"Hosting a Party? Boil Water to get Clear Ice Cubes.","url":"http://phez.co/p/lifehacks/192/hosting-a-party-boil-water-to-get-clear-ice-cubes","submitted_by":"LoneSeeker777","subphez":"lifehacks","comments_url":"http://phez.co/p/lifehacks/192/hosting-a-party-boil-water-to-get-clear-ice-cubes","comment_count":8,"vote_total":6,"upvote_total":6,"downvote_total":0,"created_at":"2015-07-18T23:29:57.944Z","updated_at":"2015-07-19T12:25:02.555Z"}, ...]</code></pre>

<p>Ruby implementation: we recommend using a gem like RestClient to access the API. First make sure you install the ruby gems:</p>

<pre><code>gem install rest-client
gem install json
</code></pre>

<p>Example code that parses the top posts:</p>

<pre><code>require 'rest-client'
require 'json'

body = RestClient.get('http://phez.co/api/v1/posts/all')

json = JSON.parse(body)

json.each do |post|
  puts post['title']
end
</code></pre>

<p>For pagination, pass in the page param. For example:</p>

<pre><code>curl "http://phez.co/api/v1/posts/all?page=2"</code></pre>

<p>Pagination works similarly for other API endpoints that return an array of values. We currently do not report total page counts. Number of items per page should be assumed to be 20. If you receive less than 20 results, assume that you've reached the last page of results.</p>

<h4>Top Subphezes</h4>

<pre><code>GET /api/v1/subphezes/top</code></pre>

<p>Example:</p>

<pre><code>curl "http://phez.co/api/v1/subphezes/top"</code></pre>

<p>Will output:</p>

<pre><code>[{"path":"announcements","title":"Announcements","url":"http://phez.co/p/announcements","creator":"p4x","subscriber_count":6,"sidebar":"Phez Official Announcements.\n","created_at":"2015-07-13T09:13:23.116Z"}, ...]</code></pre>

<p>Will return up to 100 of the most-subscribed subphezes. Pagination not supported.</p>

<h4>Subphez Hot Posts</h4>

<p>You must first know the path of a subphez to obtain its hot posts. For example, the <%= link_to '/p/pics', '/p/pics' %> subphez has path: pics</p>

<pre><code>GET /api/v1/subphezes/:path/all</code></pre>

<table class="api-table">
  <tr>
    <th>parameter</th>
    <th>description</th>
  </tr>
  <tr>
    <td>page</td>
    <td>Page of results to return. Defaults to 1.</td>
  </tr>
</table>

<p>Example:</p>

<pre><code>curl "http://phez.co/api/v1/subphezes/pics/all"</code></pre>

<p>Will output:</p>

<pre><code>[{"id":26,"title":"Largest dogs in the world","url":"http://imgur.com/gallery/kWtuT","submitted_by":"mcflurry","subphez":"pics","comments_url":"http://phez.co/p/pics/26/largest-dogs-in-the-world","comment_count":0,"vote_total":1,"upvote_total":1,"downvote_total":0,"created_at":"2015-07-13T18:07:30.283Z","updated_at":"2015-07-19T11:55:02.446Z"}, ...]</code></pre>


<h4>Subphez Latest Posts</h4>

<p>Works much like the subphez hot posts endpoint, but returns the subphez's latest posts instead.</p>

<pre><code>GET /api/v1/subphezes/:path/latest</code></pre>

<table class="api-table">
  <tr>
    <th>parameter</th>
    <th>description</th>
  </tr>
  <tr>
    <td>page</td>
    <td>Page of results to return. Defaults to 1.</td>
  </tr>
</table>

<p>Example:</p>

<pre><code>curl "http://phez.co/api/v1/subphezes/pics/latest"</code></pre>

<p>Will output:</p>

<pre><code>[{"id":188,"title":"Jesus in Philadelphia","url":"http://blogs.reuters.com/photographers-blog/2014/12/22/jesus-in-philadelphia/","submitted_by":"TheDude","subphez":"pics","comments_url":"http://phez.co/p/pics/188/jesus-in-philadelphia","comment_count":0,"vote_total":1,"upvote_total":1,"downvote_total":0,"created_at":"2015-07-18T18:12:58.127Z","updated_at":"2015-07-19T12:15:02.669Z"}, ...]</code></pre>

<h4>Show User Details</h4>

<p>You must know the username of the user whose details you'd like to obtain.</p>

<pre><code>GET /api/v1/profiles/:username/details</code></pre>

<p>Example:</p>

<pre><code>curl "http://phez.co/api/v1/profiles/p4x/details"</code></pre>

<p>Will output:</p>

<pre><code>{"post_karma":22,"comment_karma":3,"created_at":"2015-07-11T07:19:06.641Z","post_count":22,"comment_count":4}</code></pre>

<h4>List User Posts</h4>

<p>You must know the username of the user whose posts you'd like to obtain. Posts are returned in order: most recently created first.</p>

<pre><code>GET /api/v1/profiles/:username/posts</code></pre>

<table class="api-table">
  <tr>
    <th>parameter</th>
    <th>description</th>
  </tr>
  <tr>
    <td>page</td>
    <td>Page of results to return. Defaults to 1.</td>
  </tr>
</table>

<p>Example:</p>

<pre><code>curl "http://phez.co/api/v1/profiles/p4x/posts"</code></pre>

<p>This will output an array of posts, much like the subphez top posts returns (same json attributes, etc).</p>

<h4>List User Comments</h4>

<p>Comments are returned in order: most recently created first.</p>

<pre><code>GET /api/v1/profiles/:username/comments</code></pre>

<table class="api-table">
  <tr>
    <th>parameter</th>
    <th>description</th>
  </tr>
  <tr>
    <td>page</td>
    <td>Page of results to return. Defaults to 1.</td>
  </tr>
</table>

<p>Example:</p>

<pre><code>curl "http://phez.co/api/v1/profiles/p4x/comments"</code></pre>

<p>Will output:</p>

<pre><code>{"comments":[{"post_id":190,"url":"http://phez.co/p/LetsBuildPhez/190/create-a-comprehensive-database-of-subphezs#63","body":"Comment body.\nCan contain html like bold tags, image tags, etc.","vote_total":1,"upvote_total":1,"downvote_total":0}, ...]</code></pre>

<p>Note: this method returns a root element ("comments") whose value is an array of user comments.</p>

<h4>Show Post</h4>

<p>Returns post details, including comment threads. You must know the post id to obtain post details.</p>

<pre><code>GET /api/v1/posts/:id</code></pre>

<p>Example:</p>

<pre><code>curl "http://phez.co/api/v1/posts/1"</code></pre>

<p>Will output:</p>

<pre><code>{"id":1,"self":false,title":"Bernie Sanders Owning His Opponent","url":"https://www.youtube.com/watch?v=8-ssFshYZlU","comments_url":"http://phez.co/p/Bernie4Prez/1/bernie-sanders-owning-his-opponent","comments":[{"body":"This is a comment.","username":"p4x","vote_total":2,"upvote_total":2,"downvote_total":0}, ...]}</code></pre>

<p>The <i>self</i> attribute indicates whether it is a self post or not -- whether or not there should be a body attribute expected. Comment children are returned on the <i>comments</i> attribute of the comment if present.</p>

<br/>
<h3>Authenticated API Methods</h3>
<br/>

<p>We use OAuth 2.0 for authenticating user accounts. To get started, first <%= link_to 'Create an Account', '/users/sign_up' %> then head over to <%= link_to 'Manage Applications', '/oauth/applications' %> and add a new application.</p>


<h4>User Details</h4>

<p>Returns details about the authenticated user. It's a good method to test whether or not you've successfully authenticated.</p>

<pre><code>GET /api/v1/users/details</code></pre>

<p>Ruby example:</p>

<pre><code>require 'oauth2'

client_id     = 'REPLACE-WITH-YOUR-CLIENT-ID'
client_secret = 'REPLACE-WITH-YOUR-CLIENT-SECRET'

client = OAuth2::Client.new(client_id, client_secret, :site => "http://phez.co")
# Set your username and password:
access_token = client.password.get_token('username', 'password')

response = access_token.get('/api/v1/users/details')

puts response.body</code></pre>

<p>Will output:</p>

<pre><code>{"username":"username","post_karma":20,"comment_karma":3,"has_messages":true}</code></pre>


<h4>Subscribe to a Subphez</h4>

<p>Subscribes the authenticated user to the specified subphez. Specify the :path of the subphez in the URL path. (/p/pics for example has a path of 'pics')</p>

<pre><code>POST /api/v1/subphezes/:path/subscribe</code></pre>

<p>Ruby example (continued from above):</p>

<pre><code>access_token = client.password.get_token('username', 'password')

response = access_token.post('/api/v1/subphezes/bitcoin/subscribe')

puts response.body</code></pre>

<p>Will output:</p>

<pre><code>{"success":true}</code></pre>

<p>... if the user is not already subscribed to the subphez specified. If already subscribed, the result will be:</p>

<pre><code>{"success":false,"errors":"already subscribed"}</code></pre>


<h4>Unsubscribe from a Subphez</h4>

<p>Unsubscribes the authenticated user from the specified subphez.</p>

<pre><code>POST /api/v1/subphezes/:path/unsubscribe</code></pre>

<p>Ruby example:</p>

<pre><code>access_token = client.password.get_token('username', 'password')

response = access_token.post('/api/v1/subphezes/announcements/unsubscribe')

puts response.body</code></pre>

<p>Will output:</p>

<pre><code>{"success":true}</code></pre>

<p>... if the user is already subscribed to the subphez specified. Otherwise, the result will be:</p>

<pre><code>{"success":false,"errors":"not subscribed"}</code></pre>


<h4>List My Subphez Posts (Subscribed Feed)</h4>

<p>This endpoint is equivalent to the <%= link_to '/my', '/my' %> page of the Phez UI. It returns a list of posts (by hot score) from subphezes that the authenticated user is subscribed to.</p>

<pre><code>GET /api/v1/posts/my</code></pre>

<table class="api-table">
  <tr>
    <th>parameter</th>
    <th>description</th>
  </tr>
  <tr>
    <td>page</td>
    <td>Page of results to return. Defaults to 1.</td>
  </tr>
</table>

<p>Ruby example:</p>

<pre><code>response = access_token.get('/api/v1/posts/my')
puts response.body</code></pre>

<p>Will output:</p>

<pre><code>[{"id":42,"title":"Gandhi","url":"https://en.wikipedia.org/wiki/Mahatma_Gandhi","submitted_by":"user31","subphez":"history","comments_url":"http://localhost:3000/p/subphez1/42/gandhi","comment_count":7,"vote_total":54,"upvote_total":56,"downvote_total":2,"created_at":"2015-07-11T12:41:04.653Z","updated_at":"2015-07-18T09:12:01.420Z"}, ...]</code></pre>

<p>Pagination example (in ruby):</p>

<pre><code>response = access_token.get('/api/v1/posts/my', {body: {:page => 2}})</code></pre>


<h4>Create Post</h4>

<p>Create a post on Phez, added to a specific subphez.</p>

<pre><code>POST /api/v1/posts/create</code></pre>

<table class="api-table">
  <tr>
    <th>parameter</th>
    <th>description</th>
  </tr>
  <tr>
    <td>subphez_path</td>
    <td>Path of the subphez to submit the post to.</td>
  </tr>
  <tr>
    <td>title</td>
    <td>Post title.</td>
  </tr>
  <tr>
    <td>url</td>
    <td>(optional) URL of the external page to link to. Do not specify if creating a self post.</td>
  </tr>
  <tr>
    <td>body</td>
    <td>(optional) Body of a self post. Do not specify if passing a URL param (external site link).</td>
  </tr>

</table>

<p>Note: if a <i>url</i> param is present, the body field is ignored.</p>

<p>Ruby example:</p>

<pre><code>response = access_token.post('/api/v1/posts/create', {body: {:subphez_path => 'pics', :title => "MJ popcorn", :url => "https://i.imgur.com/xblF4h.jpg"}})

puts response.body</code></pre>

<p>Will output:</p>

<pre><code>{"id":96,"title":"MJ popcorn","url":"https://i.imgur.com/xblF4h.jpg","submitted_by":"username","subphez":"pics","comments_url":"http://phez.co/p/pics/96/mj-popcorn","comment_count":0,"vote_total":1,"upvote_total":1,"downvote_total":0,"created_at":"2015-07-20T07:21:18.032Z","updated_at":"2015-07-20T07:21:18.032Z"}</code></pre>

<h4>Upvote a Post</h4>

<p>Upvotes the specified post. Specify the post id in the url string.</p>

<pre><code>POST /api/v1/posts/:id/upvote</code></pre>

<p>Ruby example:</p>

<pre><code>response = access_token.post('/api/v1/posts/100/upvote')
puts response.body</code></pre>

<p>Will output:</p>

<pre><code>{"success":true,"post_id":100}</code></pre>


<h4>Downvote a Post</h4>

<p>Downvotes the specified post. Specify the post id in the url string.</p>

<pre><code>POST /api/v1/posts/:id/downvote</code></pre>

<p>Ruby example:</p>

<pre><code>response = access_token.post('/api/v1/posts/100/downvote')
puts response.body</code></pre>

<p>Will output:</p>

<pre><code>{"success":true,"post_id":100}</code></pre>


<h4>Create a Comment</h4>

<p>Adds a comment to a post (with an optional parent_id to specify a parent comment).</p>

<pre><code>POST /api/v1/comments</code></pre>

<p>Ruby example:</p>

<pre><code>response = response = access_token.post('/api/v1/comments', {body: {:post_id => 105, :parent_id => 60, :body => 'This **is** my comment.'}})
puts response.body</code></pre>

<p>Will output:</p>

<pre><code>{"success":true,"comment":{"body":"\u003cp\u003eThis \u003cstrong\u003eis\u003c/strong\u003e my comment.\u003c/p\u003e\n","username":"username","vote_total":1,"upvote_total":1,"downvote_total":0}}</code></pre>

<p>The newly-created comment is included as 'comment' in the root element. The body is the rendered (HTML) version of the comment.</p>


<h4>List Messages (Inbox)</h4>

<p>Obtain the list of latest messages from the user's inbox. Also marks the user's inbox as having been read, so do not request the endpoint unless the user is actually reading their inbox. To determine whether or not the user has any unread messages, see the User Details endpoint.</p>

<pre><code>GET /api/v1/users/inbox</code></pre>

<table class="api-table">
  <tr>
    <th>parameter</th>
    <th>description</th>
  </tr>
  <tr>
    <td>page</td>
    <td>Page of results to return. Defaults to 1.</td>
  </tr>
</table>

<p>Ruby example:</p>

<pre><code>response = access_token.get('/api/v1/users/inbox')
puts response.body</code></pre>

<p>Will output:</p>

<pre><code>{"messages":[{"reason":null,"from_user":"user31","via_system":false,"title":"hey there","body":"The message body. Contains HTML.","created_at":"2015-07-19T09:46:43.265Z"}, ...]</code></pre>

<p>Note: this method returns a root element (<i>messages</i>).</p>

<p>The <i>reason</i> attribute can be one of: nil, 'comment_reply' or 'new_post_comment'. When nil, the message is either from another user or from the system (new moderator request, etc). When set to <i>comment_reply</i>, it indicates the message was generated as a result of a new reply to one of the authenticated user's comments.  When set to <i>new_post_comment</i>, it indicates the message was generated because there was a new comment on one of the user's previously-submitted posts.</p>

<p>If you need help or have any questions about the Phez API, please ask in <%= link_to '/p/LetsBuildPhez', '/p/LetsBuildPhez' %>.</p>

<br><br>
